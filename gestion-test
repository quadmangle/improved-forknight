#!/usr/bin/env node
/**
 * Consolidated server, search index builder, and service worker utilities.
 * Provides minimal implementations to replace legacy test and worker files.
 */

const express = require('express');
const helmet = require('helmet');
const fs = require('fs');
const path = require('path');

function stripHTML(html) {
  return html.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
}

function buildSearchIndex() {
  const pages = ['index.html', 'contact-center.html', 'it-support.html', 'professional-services.html'];
  const index = pages.map((file) => {
    const content = fs.readFileSync(path.join(__dirname, file), 'utf8');
    return { url: file, content: stripHTML(content) };
  });
  fs.writeFileSync(path.join(__dirname, 'js', 'search-index.json'), JSON.stringify(index, null, 2));
  console.log(`Search index built for ${index.length} pages`);
}

function startServer(port = process.env.PORT || 3000) {
  const app = express();
  app.use(helmet());
  app.use(express.static(__dirname));
  app.get('/health', (req, res) => res.json({ status: 'ok' }));
  app.listen(port, () => console.log(`Server running on http://localhost:${port}`));
}

async function nonceWorker() {
  return 'nonce worker placeholder';
}

async function transitBroker() {
  return 'transit broker placeholder';
}

if (require.main === module) {
  const [, , cmd] = process.argv;
  switch (cmd) {
    case 'build-search':
      buildSearchIndex();
      break;
    case 'nonce-worker':
      nonceWorker().then(console.log);
      break;
    case 'transit-broker':
      transitBroker().then(console.log);
      break;
    default:
      startServer();
  }
}

module.exports = { buildSearchIndex, startServer, nonceWorker, transitBroker };
